version: '3.9'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: shaili-postgres
    environment:
      POSTGRES_DB: shaili_db
      POSTGRES_USER: shaili_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shaili_user -d shaili_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y gestión de sesiones
  redis:
    image: redis:7-alpine
    container_name: shaili-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: shaili-backend
    environment:
      - DATABASE_URL=postgresql://shaili_user:${POSTGRES_PASSWORD}@postgres:5432/shaili_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MODEL_PATH=/models/phi-3.5-mini
      - CUDA_VISIBLE_DEVICES=0  # Ajustar según GPU disponible
    volumes:
      - ../core:/app/core
      - ../branches:/app/branches
      - ../models:/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: rocm
              count: 1
              capabilities: [gpu]

  # Frontend React
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: shaili-frontend
    environment:
      - VITE_API_URL=http://backend:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: shaili-prometheus
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana para visualización de métricas
  grafana:
    image: grafana/grafana:9.5.3
    container_name: shaili-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  model_data:

networks:
  default:
    name: shaili-network
    driver: bridge
