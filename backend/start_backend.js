#!/usr/bin/env node

// Script de inicio para el backend de Sheily AI
console.log('üöÄ Iniciando backend de Sheily AI...');

// Cargar configuraci√≥n
require('dotenv').config({ path: './config.env' });

// Verificar dependencias cr√≠ticas
const requiredModules = [
  'express',
  'cors',
  'bcryptjs',
  'jsonwebtoken',
  'helmet',
  'express-rate-limit',
  'uuid',
  'ws',
  'nodemailer',
  'archiver',
  'pg-promise'
];

console.log('üìã Verificando dependencias...');
for (const module of requiredModules) {
  try {
    require(module);
    console.log(`‚úÖ ${module} - OK`);
  } catch (error) {
    console.error(`‚ùå ${module} - ERROR: ${error.message}`);
    process.exit(1);
  }
}

console.log('‚úÖ Todas las dependencias est√°n disponibles');

// Verificar configuraci√≥n cr√≠tica
const requiredEnvVars = ['JWT_SECRET', 'DB_PASSWORD'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error(`‚ùå Variables de entorno faltantes: ${missingEnvVars.join(', ')}`);
  process.exit(1);
}

if (!process.env.JWT_SECRET || process.env.JWT_SECRET.length < 32) {
  console.error('‚ùå JWT_SECRET debe tener al menos 32 caracteres');
  process.exit(1);
}

console.log('‚úÖ Configuraci√≥n cr√≠tica verificada');

// Importar y configurar el servidor
try {
  const app = require('./server.js');
  
  const PORT = process.env.PORT || 8000;
  const WEBSOCKET_PORT = process.env.WEBSOCKET_PORT || 8002;
  
  // Iniciar servidor
  const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(`üéâ Backend iniciado exitosamente en puerto ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log(`üìä Health check: http://localhost:${PORT}/api/health`);
    console.log(`üîå WebSocket: puerto ${WEBSOCKET_PORT}`);
    console.log('');
    console.log('üìã Servicios disponibles:');
    console.log('  üîß API REST');
    console.log('  üß† Chat con IA (4-bit y 16-bit)');
    console.log('  üë§ Autenticaci√≥n JWT segura');
    console.log('  üìä Monitoreo en tiempo real');
    console.log('  üíæ Backup autom√°tico');
    console.log('  üö® Sistema de alertas');
    console.log('  üóÑÔ∏è Base de datos PostgreSQL');
    console.log('');
    console.log('üõë Presiona Ctrl+C para detener');
  });
  
  // Manejo de se√±ales para cierre limpio
  process.on('SIGINT', () => {
    console.log('\nüõë Recibida se√±al SIGINT, cerrando servidor...');
    server.close(() => {
      console.log('‚úÖ Servidor cerrado correctamente');
      process.exit(0);
    });
  });
  
  process.on('SIGTERM', () => {
    console.log('\nüõë Recibida se√±al SIGTERM, cerrando servidor...');
    server.close(() => {
      console.log('‚úÖ Servidor cerrado correctamente');
      process.exit(0);
    });
  });
  
} catch (error) {
  console.error('‚ùå Error iniciando el servidor:', error);
  process.exit(1);
}
