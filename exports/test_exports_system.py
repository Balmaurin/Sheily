#!/usr/bin/env python3
"""
Sistema de Pruebas - Sistema de Exportaci√≥n Shaili AI

Este script ejecuta pruebas completas para validar que todos los componentes
del sistema de exportaci√≥n funcionen correctamente.
"""

import sys
import json
import time
from pathlib import Path
from datetime import datetime

def test_export_manager():
    """Probar el gestor de exportaci√≥n"""
    print("üß™ Probando ExportManager...")
    
    try:
        from export_manager import ExportManager, ExportConfig
        
        # Crear configuraci√≥n de prueba
        config = ExportConfig(
            format="jsonl",
            include_pii=True,
            include_metadata=True,
            compress=False
        )
        
        manager = ExportManager(config)
        
        # Probar exportaci√≥n de datos de usuario
        result = manager.export_user_data("test_user_123", ["profile", "sessions"])
        
        if result["success"]:
            print(f"  ‚úÖ Exportaci√≥n de usuario exitosa: {result['filename']}")
            print(f"     Registros: {result['total_records']}")
            print(f"     Tama√±o: {result['file_size']} bytes")
        else:
            print(f"  ‚ùå Error en exportaci√≥n de usuario: {result.get('error', 'Unknown error')}")
            return False
        
        # Probar exportaci√≥n de conversaciones
        conv_result = manager.export_conversations()
        
        if conv_result["success"]:
            print(f"  ‚úÖ Exportaci√≥n de conversaciones exitosa: {conv_result['filename']}")
        else:
            print(f"  ‚ùå Error en exportaci√≥n de conversaciones: {conv_result.get('error', 'Unknown error')}")
            return False
        
        # Probar exportaci√≥n de datos del sistema
        sys_result = manager.export_system_data(["config", "performance"])
        
        if sys_result["success"]:
            print(f"  ‚úÖ Exportaci√≥n del sistema exitosa: {sys_result['filename']}")
        else:
            print(f"  ‚ùå Error en exportaci√≥n del sistema: {sys_result.get('error', 'Unknown error')}")
            return False
        
        # Probar historial
        history = manager.get_export_history(5)
        print(f"  ‚úÖ Historial de exportaciones: {len(history)} entradas")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en ExportManager: {e}")
        return False

def test_data_exporter():
    """Probar el exportador de datos especializado"""
    print("üß™ Probando DataExporter...")
    
    try:
        from data_exporter import DataExporter, ExportSpecification
        
        exporter = DataExporter()
        
        # Crear archivo de prueba para conversaciones
        test_db_path = Path("test_conversations.db")
        import sqlite3
        conn = sqlite3.connect(test_db_path)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS conversations (
                id TEXT PRIMARY KEY,
                user_id TEXT,
                message TEXT,
                timestamp TEXT,
                topic TEXT
            )
        """)
        
        # Insertar datos de prueba
        test_data = [
            ("conv_1", "user_123", "¬øQu√© es la fotos√≠ntesis?", "2024-01-15T10:00:00", "ciencia"),
            ("conv_2", "user_456", "¬øC√≥mo funciona la IA?", "2024-01-15T11:00:00", "tecnolog√≠a"),
            ("conv_3", "user_123", "¬øCu√°l es la capital de Espa√±a?", "2024-01-15T12:00:00", "geograf√≠a")
        ]
        
        conn.executemany("INSERT OR REPLACE INTO conversations VALUES (?, ?, ?, ?, ?)", test_data)
        conn.commit()
        conn.close()
        
        # Probar exportaci√≥n de conversaciones
        conv_spec = ExportSpecification(
            data_type="conversations",
            source_path=str(test_db_path),
            output_format="jsonl"
        )
        
        result = exporter.export_conversations(conv_spec)
        
        if result["success"]:
            print(f"  ‚úÖ Exportaci√≥n de conversaciones exitosa: {result['filename']}")
        else:
            print(f"  ‚ùå Error en exportaci√≥n de conversaciones: {result.get('error', 'Unknown error')}")
            return False
        
        # Probar exportaci√≥n en diferentes formatos
        formats_to_test = ["csv", "json", "parquet"]
        for fmt in formats_to_test:
            spec = ExportSpecification(
                data_type="conversations",
                source_path=str(test_db_path),
                output_format=fmt
            )
            
            result = exporter.export_conversations(spec)
            if result["success"]:
                print(f"  ‚úÖ Exportaci√≥n en formato {fmt} exitosa")
            else:
                print(f"  ‚ùå Error en formato {fmt}: {result.get('error', 'Unknown error')}")
        
        # Limpiar archivo de prueba
        test_db_path.unlink()
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en DataExporter: {e}")
        return False

def test_package_imports():
    """Probar importaciones del paquete"""
    print("üß™ Probando importaciones del paquete...")
    
    try:
        import exports
        
        # Probar funciones de conveniencia
        result = exports.export_user_data("test_user", format="jsonl", include_pii=False)
        if result["success"]:
            print("  ‚úÖ Funci√≥n export_user_data funcionando")
        else:
            print(f"  ‚ùå Error en export_user_data: {result.get('error', 'Unknown error')}")
        
        # Probar configuraci√≥n
        config = exports.create_export_config(format="csv", include_pii=False)
        if config.format == "csv":
            print("  ‚úÖ Funci√≥n create_export_config funcionando")
        else:
            print("  ‚ùå Error en create_export_config")
        
        # Probar especificaci√≥n
        spec = exports.create_export_specification(
            data_type="conversations",
            source_path="test.db",
            output_format="jsonl"
        )
        if spec.data_type == "conversations":
            print("  ‚úÖ Funci√≥n create_export_specification funcionando")
        else:
            print("  ‚ùå Error en create_export_specification")
        
        # Probar funciones de utilidad
        formats = exports.get_supported_formats()
        if len(formats) > 0:
            print(f"  ‚úÖ Funci√≥n get_supported_formats funcionando: {len(formats)} formatos")
        else:
            print("  ‚ùå Error en get_supported_formats")
        
        data_types = exports.get_supported_data_types()
        if len(data_types) > 0:
            print(f"  ‚úÖ Funci√≥n get_supported_data_types funcionando: {len(data_types)} tipos")
        else:
            print("  ‚ùå Error en get_supported_data_types")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en importaciones del paquete: {e}")
        return False

def test_file_operations():
    """Probar operaciones de archivos"""
    print("üß™ Probando operaciones de archivos...")
    
    try:
        from export_manager import ExportManager, ExportConfig
        
        config = ExportConfig(
            format="jsonl",
            include_pii=True,
            include_metadata=True,
            compress=True  # Probar compresi√≥n
        )
        
        manager = ExportManager(config)
        
        # Probar exportaci√≥n con compresi√≥n
        result = manager.export_user_data("test_user_compressed", ["profile"])
        
        if result["success"]:
            print(f"  ‚úÖ Exportaci√≥n comprimida exitosa: {result['filename']}")
            
            # Verificar que el archivo existe y est√° comprimido
            file_path = Path(result["file_path"])
            if file_path.exists():
                print(f"  ‚úÖ Archivo comprimido existe: {file_path.stat().st_size} bytes")
            else:
                print("  ‚ùå Archivo comprimido no encontrado")
                return False
        else:
            print(f"  ‚ùå Error en exportaci√≥n comprimida: {result.get('error', 'Unknown error')}")
            return False
        
        # Probar limpieza de archivos antiguos
        deleted_count = manager.cleanup_old_exports(days=0)  # Eliminar archivos de hoy
        print(f"  ‚úÖ Limpieza de archivos: {deleted_count} archivos eliminados")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en operaciones de archivos: {e}")
        return False

def test_metadata_generation():
    """Probar generaci√≥n de metadatos"""
    print("üß™ Probando generaci√≥n de metadatos...")
    
    try:
        from export_manager import ExportManager, ExportConfig
        
        config = ExportConfig(
            format="json",
            include_pii=True,
            include_metadata=True
        )
        
        manager = ExportManager(config)
        
        # Probar exportaci√≥n con metadatos
        result = manager.export_user_data("test_user_metadata", ["profile", "sessions"])
        
        if result["success"]:
            print(f"  ‚úÖ Exportaci√≥n con metadatos exitosa: {result['filename']}")
            
            # Verificar archivo de metadatos
            metadata_path = Path(result["metadata_path"])
            if metadata_path.exists():
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                required_fields = ["export_id", "timestamp", "format", "total_records", "checksum"]
                missing_fields = [field for field in required_fields if field not in metadata]
                
                if not missing_fields:
                    print("  ‚úÖ Metadatos completos generados")
                    print(f"     Export ID: {metadata['export_id']}")
                    print(f"     Checksum: {metadata['checksum'][:16]}...")
                else:
                    print(f"  ‚ùå Campos faltantes en metadatos: {missing_fields}")
                    return False
            else:
                print("  ‚ùå Archivo de metadatos no encontrado")
                return False
        else:
            print(f"  ‚ùå Error en exportaci√≥n con metadatos: {result.get('error', 'Unknown error')}")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en generaci√≥n de metadatos: {e}")
        return False

def test_error_handling():
    """Probar manejo de errores"""
    print("üß™ Probando manejo de errores...")
    
    try:
        from export_manager import ExportManager, ExportConfig
        from data_exporter import DataExporter, ExportSpecification
        
        # Probar con configuraci√≥n inv√°lida
        config = ExportConfig(format="invalid_format")
        manager = ExportManager(config)
        
        result = manager.export_user_data("test_user", ["profile"])
        if not result["success"]:
            print("  ‚úÖ Error manejado correctamente para formato inv√°lido")
        else:
            print("  ‚ùå Error no manejado para formato inv√°lido")
            return False
        
        # Probar con ruta de base de datos inexistente
        exporter = DataExporter()
        spec = ExportSpecification(
            data_type="conversations",
            source_path="nonexistent.db",
            output_format="jsonl"
        )
        
        result = exporter.export_conversations(spec)
        if not result["success"]:
            print("  ‚úÖ Error manejado correctamente para archivo inexistente")
        else:
            print("  ‚ùå Error no manejado para archivo inexistente")
            return False
        
        # Probar con datos vac√≠os
        config = ExportConfig(format="jsonl")
        manager = ExportManager(config)
        
        # Simular datos vac√≠os
        result = manager.export_user_data("empty_user", [])
        if result["success"]:
            print("  ‚úÖ Manejo correcto de datos vac√≠os")
        else:
            print(f"  ‚ö†Ô∏è Resultado con datos vac√≠os: {result.get('error', 'Unknown error')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en manejo de errores: {e}")
        return False

def generate_test_report(test_results):
    """Generar reporte de pruebas"""
    print("üìä Generando reporte de pruebas...")
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'test_summary': {
            'total_tests': len(test_results),
            'passed_tests': sum(1 for result in test_results.values() if result),
            'failed_tests': sum(1 for result in test_results.values() if not result)
        },
        'test_results': test_results,
        'overall_status': all(test_results.values())
    }
    
    # Guardar reporte
    report_path = Path("exports/test_report.json")
    report_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"  ‚úÖ Reporte guardado en: {report_path}")
    return report

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA DE EXPORTACI√ìN")
    print("=" * 60)
    
    start_time = time.time()
    
    # Ejecutar todas las pruebas
    test_functions = [
        ('export_manager', test_export_manager),
        ('data_exporter', test_data_exporter),
        ('package_imports', test_package_imports),
        ('file_operations', test_file_operations),
        ('metadata_generation', test_metadata_generation),
        ('error_handling', test_error_handling)
    ]
    
    test_results = {}
    
    for test_name, test_func in test_functions:
        print(f"\n--- {test_name.upper()} ---")
        success = test_func()
        test_results[test_name] = success
        
        if success:
            print(f"‚úÖ {test_name} - EXITOSO")
        else:
            print(f"‚ùå {test_name} - FALLIDO")
    
    # Generar reporte
    print("\n" + "=" * 60)
    report = generate_test_report(test_results)
    
    # Mostrar resumen
    print("\nüìã RESUMEN DE PRUEBAS:")
    print(f"  Total de pruebas: {report['test_summary']['total_tests']}")
    print(f"  Pruebas exitosas: {report['test_summary']['passed_tests']}")
    print(f"  Pruebas fallidas: {report['test_summary']['failed_tests']}")
    print(f"  Estado general: {'‚úÖ EXITOSO' if report['overall_status'] else '‚ùå FALLIDO'}")
    
    end_time = time.time()
    print(f"\n‚è±Ô∏è  Tiempo total de pruebas: {end_time - start_time:.2f} segundos")
    
    # Mostrar detalles de pruebas fallidas
    failed_tests = [name for name, success in test_results.items() if not success]
    if failed_tests:
        print(f"\n‚ö†Ô∏è  Pruebas fallidas: {', '.join(failed_tests)}")
    
    print("\n" + "=" * 60)
    
    # Retornar c√≥digo de salida
    return 0 if report['overall_status'] else 1

if __name__ == "__main__":
    sys.exit(main())
