version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: shaili-postgres
    environment:
      POSTGRES_DB: shaili_db
      POSTGRES_USER: shaili_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-yo}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shaili_user -d shaili_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y colas
  redis:
    image: redis:7-alpine
    container_name: shaili-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-yo}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend de Shaili AI
  backend:
    build: 
      context: ../interface
      dockerfile: Dockerfile.backend
    container_name: shaili-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=shaili_user
      - DB_PASSWORD=${DB_PASSWORD:-yo}
      - DB_NAME=shaili_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-yo}
      - JWT_SECRET=long_and_secure_jwt_secret_key
    ports:
      - "8000:8000"
    volumes:
      - ../interface:/app
      - backend-node-modules:/app/node_modules

  # Frontend de Shaili AI
  frontend:
    build: 
      context: ../interface
      dockerfile: Dockerfile.frontend
    container_name: shaili-frontend
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://backend:8000
    ports:
      - "3000:3000"
    volumes:
      - ../interface:/app
      - frontend-node-modules:/app/node_modules

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: shaili-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana para visualización de métricas
  grafana:
    image: grafana/grafana:9.5.3
    container_name: shaili-grafana
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=shaili_grafana_admin
      - GF_USERS_ALLOW_SIGN_UP=false

volumes:
  postgres-data:
  redis-data:
  backend-node-modules:
  frontend-node-modules:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: shaili-network
