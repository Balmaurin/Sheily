#!/usr/bin/env python3
"""
Script de Instalaci√≥n y Configuraci√≥n - Sistema de Evaluaci√≥n Shaili AI

Este script automatiza la instalaci√≥n y configuraci√≥n del sistema de evaluaci√≥n
de calidad de respuestas de IA.
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path


def check_python_version():
    """Verificar versi√≥n de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")


def install_package(package):
    """Instalar paquete usando pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False


def check_package(package_name):
    """Verificar si un paquete est√° instalado"""
    try:
        importlib.import_module(package_name)
        return True
    except ImportError:
        return False


def install_dependencies():
    """Instalar dependencias del sistema de evaluaci√≥n"""
    print("üì¶ Instalando dependencias...")

    dependencies = [
        "numpy",
        "nltk",
        "spacy",
        "torch",
        "matplotlib",
        # sentence-transformers removido
        "scikit-learn",
    ]

    for package in dependencies:
        if not check_package(package.replace("-", "_")):
            print(f"  Instalando {package}...")
            if install_package(package):
                print(f"  ‚úÖ {package} instalado")
            else:
                print(f"  ‚ùå Error instalando {package}")
                return False
        else:
            print(f"  ‚úÖ {package} ya est√° instalado")

    return True


def download_nlp_resources():
    """Descargar recursos de NLP"""
    print("üåê Descargando recursos de NLP...")

    # Descargar modelo de SpaCy
    try:
        # SpaCy removido
        pass
        print("  ‚úÖ Modelo SpaCy espa√±ol descargado")
    except subprocess.CalledProcessError:
        print("  ‚ùå Error descargando modelo SpaCy")
        return False

    # Descargar recursos de NLTK
    try:
        import nltk

        nltk.download("punkt", quiet=True)
        print("  ‚úÖ Recursos NLTK descargados")
    except Exception as e:
        print(f"  ‚ùå Error descargando recursos NLTK: {e}")
        return False

    return True


def create_directories():
    """Crear directorios necesarios"""
    print("üìÅ Creando directorios...")

    directories = [
        "logs/evaluation",
        "results/evaluation",
        "models/evaluation",
        "datasets/test",
    ]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ Directorio {directory} creado")

    return True


def test_imports():
    """Probar importaciones de los m√≥dulos"""
    print("üß™ Probando importaciones...")

    modules_to_test = [
        ("numpy", "numpy"),
        ("nltk", "nltk"),
        ("spacy", "spacy"),
        ("torch", "torch"),
        ("matplotlib", "matplotlib"),
        # sentence_transformers removido
        ("sklearn", "scikit-learn"),
    ]

    for module_name, package_name in modules_to_test:
        try:
            importlib.import_module(module_name)
            print(f"  ‚úÖ {package_name} importado correctamente")
        except ImportError as e:
            print(f"  ‚ùå Error importando {package_name}: {e}")
            return False

    return True


def test_evaluation_modules():
    """Probar m√≥dulos de evaluaci√≥n"""
    print("üîç Probando m√≥dulos de evaluaci√≥n...")

    # Cambiar al directorio de evaluaci√≥n
    original_dir = os.getcwd()
    evaluation_dir = Path(__file__).parent
    os.chdir(evaluation_dir)

    try:
        # Probar importaci√≥n de m√≥dulos
        from diversity import DiversityEvaluator

        print("  ‚úÖ DiversityEvaluator importado")

        from toxicity import ToxicityEvaluator

        print("  ‚úÖ ToxicityEvaluator importado")

        from coherence import CoherenceEvaluator

        print("  ‚úÖ CoherenceEvaluator importado")

        from pipeline import QualityEvaluationPipeline

        print("  ‚úÖ QualityEvaluationPipeline importado")

        from performance_benchmark import PerformanceBenchmark

        print("  ‚úÖ PerformanceBenchmark importado")

        from config import EvaluationConfig

        print("  ‚úÖ EvaluationConfig importado")

    except ImportError as e:
        print(f"  ‚ùå Error importando m√≥dulos de evaluaci√≥n: {e}")
        os.chdir(original_dir)
        return False

    os.chdir(original_dir)
    return True


def run_basic_tests():
    """Ejecutar pruebas b√°sicas"""
    print("üß™ Ejecutando pruebas b√°sicas...")

    try:
        # Cambiar al directorio de evaluaci√≥n
        original_dir = os.getcwd()
        evaluation_dir = Path(__file__).parent
        os.chdir(evaluation_dir)

        # Probar evaluador de diversidad
        from diversity import DiversityEvaluator

        evaluator = DiversityEvaluator()
        test_text = "La fotos√≠ntesis es un proceso biol√≥gico fascinante."
        result = evaluator.evaluate_diversity(test_text)
        print(f"  ‚úÖ Test de diversidad: {result['diversity_score']:.3f}")

        # Probar evaluador de toxicidad
        from toxicity import ToxicityEvaluator

        toxicity_evaluator = ToxicityEvaluator()
        result = toxicity_evaluator.evaluate_toxicity(test_text)
        print(f"  ‚úÖ Test de toxicidad: {result['toxicity_score']:.3f}")

        # Probar evaluador de coherencia
        from coherence import CoherenceEvaluator

        coherence_evaluator = CoherenceEvaluator()
        result = coherence_evaluator.calculate_coherence(
            "¬øQu√© es la fotos√≠ntesis?", test_text
        )
        print(f"  ‚úÖ Test de coherencia: {result:.3f}")

        os.chdir(original_dir)
        return True

    except Exception as e:
        print(f"  ‚ùå Error en pruebas b√°sicas: {e}")
        os.chdir(original_dir)
        return False


def create_sample_data():
    """Crear datos de ejemplo para testing"""
    print("üìù Creando datos de ejemplo...")

    sample_data = {
        "queries": [
            "¬øQu√© es la fotos√≠ntesis?",
            "¬øC√≥mo funciona la inteligencia artificial?",
            "¬øCu√°les son los s√≠ntomas de la diabetes?",
            "¬øQu√© es el cambio clim√°tico?",
            "¬øC√≥mo se desarrolla una aplicaci√≥n web?",
        ],
        "responses": [
            "La fotos√≠ntesis es un proceso biol√≥gico donde las plantas transforman luz solar en energ√≠a qu√≠mica.",
            "La inteligencia artificial es una rama de la computaci√≥n que busca crear sistemas capaces de realizar tareas que requieren inteligencia humana.",
            "Los s√≠ntomas de la diabetes incluyen sed excesiva, micci√≥n frecuente, fatiga y visi√≥n borrosa.",
            "El cambio clim√°tico se refiere a las alteraciones a largo plazo en los patrones clim√°ticos globales.",
            "Una aplicaci√≥n web se desarrolla usando tecnolog√≠as como HTML, CSS, JavaScript y frameworks modernos.",
        ],
    }

    import json

    test_data_path = Path("datasets/test/sample_data.json")
    test_data_path.parent.mkdir(parents=True, exist_ok=True)

    with open(test_data_path, "w", encoding="utf-8") as f:
        json.dump(sample_data, f, ensure_ascii=False, indent=2)

    print(f"  ‚úÖ Datos de ejemplo creados en {test_data_path}")
    return True


def main():
    """Funci√≥n principal de instalaci√≥n"""
    print("üöÄ Instalando Sistema de Evaluaci√≥n - Shaili AI")
    print("=" * 50)

    # Verificar versi√≥n de Python
    check_python_version()

    # Instalar dependencias
    if not install_dependencies():
        print("‚ùå Error instalando dependencias")
        sys.exit(1)

    # Descargar recursos de NLP
    if not download_nlp_resources():
        print("‚ùå Error descargando recursos de NLP")
        sys.exit(1)

    # Crear directorios
    if not create_directories():
        print("‚ùå Error creando directorios")
        sys.exit(1)

    # Probar importaciones
    if not test_imports():
        print("‚ùå Error en importaciones")
        sys.exit(1)

    # Probar m√≥dulos de evaluaci√≥n
    if not test_evaluation_modules():
        print("‚ùå Error en m√≥dulos de evaluaci√≥n")
        sys.exit(1)

    # Ejecutar pruebas b√°sicas
    if not run_basic_tests():
        print("‚ùå Error en pruebas b√°sicas")
        sys.exit(1)

    # Crear datos de ejemplo
    create_sample_data()

    print("\n" + "=" * 50)
    print("‚úÖ Instalaci√≥n completada exitosamente!")
    print("\nüìã Pr√≥ximos pasos:")
    print("  1. Ejecutar: python evaluation/diversity.py")
    print("  2. Ejecutar: python evaluation/toxicity.py")
    print("  3. Ejecutar: python evaluation/coherence.py")
    print("  4. Ejecutar: python evaluation/pipeline.py")
    print("  5. Ejecutar: python evaluation/performance_benchmark.py")
    print("\nüìñ Para m√°s informaci√≥n, consulta: evaluation/README.md")


if __name__ == "__main__":
    main()
