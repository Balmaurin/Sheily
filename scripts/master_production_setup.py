#!/usr/bin/env python3
"""
Script Maestro de Preparaci√≥n para Producci√≥n
============================================

Ejecuta todo el proceso de preparaci√≥n para producci√≥n de forma ordenada:
1. Corrige dependencias
2. Inicializa bases de datos
3. Ejecuta verificaciones completas
4. Genera reporte final
"""

import os
import sys
import subprocess
import json
import time
from pathlib import Path
from datetime import datetime


class MasterProductionSetup:
    def __init__(self):
        self.project_root = Path.cwd()
        self.start_time = datetime.now()
        self.results = {}

    def run_script(self, script_path, description):
        """Ejecuta un script y registra el resultado"""
        print(f"\nüöÄ {description}")
        print("=" * 60)

        try:
            result = subprocess.run(
                [sys.executable, script_path],
                capture_output=True,
                text=True,
                timeout=1800,  # 30 minutos m√°ximo por script
            )

            if result.returncode == 0:
                print(f"‚úÖ {description} - EXITOSO")
                print(result.stdout)
                return True, result.stdout
            else:
                print(f"‚ùå {description} - FALL√ì")
                print(f"Error: {result.stderr}")
                return False, result.stderr

        except subprocess.TimeoutExpired:
            print(f"‚è∞ {description} - TIMEOUT")
            return False, "Timeout"
        except Exception as e:
            print(f"‚ùå {description} - ERROR: {e}")
            return False, str(e)

    def step_1_setup_virtual_environment(self):
        """Paso 1: Configurar entorno virtual"""
        print("\n" + "=" * 70)
        print("üêç PASO 1: CONFIGURACI√ìN DE ENTORNO VIRTUAL")
        print("=" * 70)

        script_path = self.project_root / "scripts" / "setup_virtual_environment.py"
        if not script_path.exists():
            print("‚ùå Script setup_virtual_environment.py no encontrado")
            return False

        success, output = self.run_script(
            script_path, "Configurando entorno virtual y dependencias"
        )

        self.results["virtual_environment_setup"] = success
        return success

    def step_2_activate_environment(self):
        """Paso 2: Activar entorno virtual"""
        print("\n" + "=" * 70)
        print("üîß PASO 2: ACTIVACI√ìN DE ENTORNO VIRTUAL")
        print("=" * 70)

        activation_script = self.project_root / "activate_venv.sh"
        if not activation_script.exists():
            print("‚ùå Script de activaci√≥n no encontrado")
            return False

        try:
            # Activar el entorno virtual
            result = subprocess.run(
                ["source", str(activation_script)],
                shell=True,
                capture_output=True,
                text=True,
                timeout=30,
            )

            if result.returncode == 0:
                print("‚úÖ Entorno virtual activado")

                # Verificar que las dependencias cr√≠ticas funcionan
                venv_python = self.project_root / "venv" / "bin" / "python"
                if venv_python.exists():
                    test_result = subprocess.run(
                        [
                            str(venv_python),
                            "-c",
                            "import torch, transformers, fastapi; print('OK')",
                        ],
                        capture_output=True,
                        text=True,
                        timeout=30,
                    )

                    if test_result.returncode == 0 and "OK" in test_result.stdout:
                        print("‚úÖ Dependencias cr√≠ticas verificadas")
                        self.results["environment_activated"] = True
                        return True
                    else:
                        print("‚ùå Error verificando dependencias cr√≠ticas")
                        self.results["environment_activated"] = False
                        return False
                else:
                    print("‚ùå Python del entorno virtual no encontrado")
                    self.results["environment_activated"] = False
                    return False
            else:
                print("‚ùå Error activando entorno virtual")
                self.results["environment_activated"] = False
                return False

        except Exception as e:
            print(f"‚ùå Error activando entorno virtual: {e}")
            self.results["environment_activated"] = False
            return False

    def step_1_fix_dependencies(self):
        """Paso 1: Corregir dependencias"""
        print("\n" + "=" * 70)
        print("üì¶ PASO 1: CORRECCI√ìN DE DEPENDENCIAS")
        print("=" * 70)

        script_path = self.project_root / "scripts" / "fix_dependencies.py"
        if not script_path.exists():
            print("‚ùå Script fix_dependencies.py no encontrado")
            return False

        success, output = self.run_script(
            script_path, "Corrigiendo dependencias del sistema"
        )

        self.results["dependencies_fixed"] = success
        return success

    def step_2_initialize_databases(self):
        """Paso 2: Inicializar bases de datos"""
        print("\n" + "=" * 70)
        print("üóÑÔ∏è PASO 2: INICIALIZACI√ìN DE BASES DE DATOS")
        print("=" * 70)

        script_path = self.project_root / "scripts" / "initialize_databases.py"
        if not script_path.exists():
            print("‚ùå Script initialize_databases.py no encontrado")
            return False

        success, output = self.run_script(
            script_path, "Inicializando bases de datos con datos de prueba"
        )

        self.results["databases_initialized"] = success
        return success

    def step_3_verify_system(self):
        """Paso 3: Verificar sistema optimizado"""
        print("\n" + "=" * 70)
        print("üîç PASO 3: VERIFICACI√ìN DEL SISTEMA")
        print("=" * 70)

        script_path = self.project_root / "scripts/verificar_sistema.sh"
        if not script_path.exists():
            print("‚ùå Script scripts/verificar_sistema.sh no encontrado")
            return False

        try:
            result = subprocess.run(
                ["./scripts/verificar_sistema.sh"],
                capture_output=True,
                text=True,
                timeout=300,  # 5 minutos m√°ximo
            )

            if result.returncode in [0, 1]:  # 0 = √©xito, 1 = advertencias menores
                print("‚úÖ Verificaci√≥n del sistema - EXITOSO")
                print(result.stdout)
                self.results["system_verified"] = True
                return True
            else:
                print("‚ùå Verificaci√≥n del sistema - FALL√ì")
                print(f"Error: {result.stderr}")
                self.results["system_verified"] = False
                return False

        except subprocess.TimeoutExpired:
            print("‚è∞ Verificaci√≥n del sistema - TIMEOUT")
            self.results["system_verified"] = False
            return False
        except Exception as e:
            print(f"‚ùå Verificaci√≥n del sistema - ERROR: {e}")
            self.results["system_verified"] = False
            return False

    def step_4_complete_verification(self):
        """Paso 4: Verificaci√≥n completa para producci√≥n"""
        print("\n" + "=" * 70)
        print("üöÄ PASO 4: VERIFICACI√ìN COMPLETA PARA PRODUCCI√ìN")
        print("=" * 70)

        script_path = self.project_root / "scripts" / "prepare_for_production.py"
        if not script_path.exists():
            print("‚ùå Script prepare_for_production.py no encontrado")
            return False

        success, output = self.run_script(
            script_path, "Ejecutando verificaci√≥n completa para producci√≥n"
        )

        self.results["production_verified"] = success
        return success

    def step_5_docker_verification(self):
        """Paso 5: Verificar Docker"""
        print("\n" + "=" * 70)
        print("üê≥ PASO 5: VERIFICACI√ìN DE DOCKER")
        print("=" * 70)

        # Verificar que Docker est√° disponible
        try:
            result = subprocess.run(
                ["docker", "--version"], capture_output=True, text=True, timeout=10
            )

            if result.returncode == 0:
                print("‚úÖ Docker est√° disponible")
                print(result.stdout.strip())

                # Verificar docker-compose
                result = subprocess.run(
                    ["docker-compose", "--version"],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )

                if result.returncode == 0:
                    print("‚úÖ Docker Compose est√° disponible")
                    print(result.stdout.strip())

                    # Verificar archivos de Docker
                    docker_files = [
                        "docker/docker-compose.yml",
                        "docker/docker-compose.dev.yml",
                        "docker/Dockerfile",
                    ]

                    all_files_exist = True
                    for file_path in docker_files:
                        if os.path.exists(file_path):
                            size = os.path.getsize(file_path)
                            print(f"‚úÖ {file_path} - {size} bytes")
                        else:
                            print(f"‚ùå {file_path} - No encontrado")
                            all_files_exist = False

                    self.results["docker_verified"] = all_files_exist
                    return all_files_exist
                else:
                    print("‚ùå Docker Compose no est√° disponible")
                    self.results["docker_verified"] = False
                    return False
            else:
                print("‚ùå Docker no est√° disponible")
                self.results["docker_verified"] = False
                return False

        except Exception as e:
            print(f"‚ùå Error verificando Docker: {e}")
            self.results["docker_verified"] = False
            return False

    def step_7_final_health_check(self):
        """Paso 7: Verificaci√≥n final de salud del sistema"""
        print("\n" + "=" * 70)
        print("üè• PASO 7: VERIFICACI√ìN FINAL DE SALUD")
        print("=" * 70)

        health_checks = []

        # Verificar que las bases de datos tienen datos
        databases = [
            ("data/knowledge_base.db", "knowledge_base"),
            ("data/embeddings_sqlite.db", "embeddings"),
            ("monitoring/metrics.db", "metrics"),
        ]

        for db_path, table_name in databases:
            if os.path.exists(db_path):
                try:
                    result = subprocess.run(
                        f"sqlite3 {db_path} 'SELECT COUNT(*) FROM {table_name};'",
                        shell=True,
                        capture_output=True,
                        text=True,
                    )
                    if result.returncode == 0:
                        count = int(result.stdout.strip())
                        if count > 0:
                            print(f"‚úÖ {db_path} - {count} registros")
                            health_checks.append(True)
                        else:
                            print(f"‚ö†Ô∏è {db_path} - 0 registros")
                            health_checks.append(False)
                    else:
                        print(f"‚ùå {db_path} - Error al verificar")
                        health_checks.append(False)
                except Exception as e:
                    print(f"‚ùå {db_path} - Error: {e}")
                    health_checks.append(False)
            else:
                print(f"‚ùå {db_path} - No existe")
                health_checks.append(False)

        # Verificar que los m√≥dulos principales importan usando el entorno virtual
        venv_python = self.project_root / "venv" / "bin" / "python"
        modules = [
            "modules.core.neurofusion_core",
            "modules.unified_systems.module_initializer",
        ]

        for module in modules:
            try:
                result = subprocess.run(
                    [
                        str(venv_python),
                        "-c",
                        f"import sys; sys.path.append('.'); import {module}; print('OK')",
                    ],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )
                if result.returncode == 0 and "OK" in result.stdout:
                    print(f"‚úÖ {module} - Importa correctamente")
                    health_checks.append(True)
                else:
                    print(f"‚ùå {module} - Error al importar")
                    health_checks.append(False)
            except Exception as e:
                print(f"‚ùå {module} - Error: {e}")
                health_checks.append(False)

        # Verificar dependencias cr√≠ticas en el entorno virtual
        critical_deps = ["torch", "transformers", "fastapi"]
        for dep in critical_deps:
            try:
                result = subprocess.run(
                    [str(venv_python), "-c", f"import {dep}; print('OK')"],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )
                if result.returncode == 0 and "OK" in result.stdout:
                    print(f"‚úÖ {dep} - Funciona correctamente")
                    health_checks.append(True)
                else:
                    print(f"‚ùå {dep} - Error al importar")
                    health_checks.append(False)
            except Exception as e:
                print(f"‚ùå {dep} - Error: {e}")
                health_checks.append(False)

        # Calcular salud general
        health_score = sum(health_checks) / len(health_checks) if health_checks else 0
        self.results["health_score"] = health_score

        print(f"\nüìä Puntuaci√≥n de salud: {health_score:.1%}")

        return health_score >= 0.8  # 80% o m√°s

    def generate_final_report(self):
        """Genera el reporte final"""
        print("\n" + "=" * 70)
        print("üìä GENERANDO REPORTE FINAL")
        print("=" * 70)

        duration = (datetime.now() - self.start_time).total_seconds()

        # Calcular puntuaci√≥n general
        total_steps = len(self.results)
        passed_steps = sum(1 for result in self.results.values() if result)
        overall_score = (passed_steps / total_steps) * 100 if total_steps > 0 else 0

        report = {
            "timestamp": datetime.now().isoformat(),
            "project_root": str(self.project_root),
            "duration_seconds": duration,
            "results": self.results,
            "overall_score": overall_score,
            "status": (
                "READY"
                if overall_score >= 85
                else "NEEDS_WORK" if overall_score >= 70 else "NOT_READY"
            ),
        }

        # Guardar reporte
        report_path = self.project_root / "MASTER_PRODUCTION_REPORT.json"
        with open(report_path, "w") as f:
            json.dump(report, f, indent=2)

        print(f"‚úÖ Reporte final guardado en: {report_path}")
        return report

    def print_final_summary(self, report):
        """Imprime el resumen final"""
        print("\n" + "=" * 70)
        print("üéØ RESUMEN FINAL DE PREPARACI√ìN PARA PRODUCCI√ìN")
        print("=" * 70)

        print(f"üìÖ Fecha: {report['timestamp']}")
        print(f"üìÅ Proyecto: {report['project_root']}")
        print(f"‚è±Ô∏è Duraci√≥n total: {report['duration_seconds']:.1f} segundos")
        print()

        print("üìã RESULTADOS POR PASO:")
        for step, result in report["results"].items():
            status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
            step_name = step.replace("_", " ").title()
            print(f"   {step_name}: {status}")

        print()
        print(f"üìä PUNTUACI√ìN GENERAL: {report['overall_score']:.1f}/100")
        print(f"üéØ ESTADO: {report['status']}")

        if report["status"] == "READY":
            print("\nüéâ ¬°EL SISTEMA EST√Å LISTO PARA PRODUCCI√ìN!")
            print("‚úÖ Todas las verificaciones cr√≠ticas han pasado")
            print("‚úÖ Las dependencias est√°n instaladas")
            print("‚úÖ Las bases de datos est√°n inicializadas")
            print("‚úÖ Docker est√° configurado")
            print("‚úÖ El sistema est√° saludable")
            print("\nüöÄ Puedes proceder con el deployment en producci√≥n")
        elif report["status"] == "NEEDS_WORK":
            print("\n‚ö†Ô∏è El sistema necesita trabajo antes de producci√≥n")
            print("üîß Revisa los pasos que fallaron")
            print("üîß Completa las configuraciones faltantes")
            print("üîß Ejecuta nuevamente el script despu√©s de las correcciones")
        else:
            print("\nüö® El sistema NO est√° listo para producci√≥n")
            print("‚ùå Muchos pasos cr√≠ticos fallaron")
            print("‚ùå Necesita trabajo significativo")
            print("‚ùå No proceder con el deployment")

        print("\n" + "=" * 70)

    def run_master_setup(self):
        """Ejecuta todo el proceso maestro"""
        print("üöÄ INICIANDO PREPARACI√ìN MAESTRA PARA PRODUCCI√ìN")
        print("=" * 70)
        print("Este script ejecutar√° todos los pasos necesarios para")
        print("preparar el sistema NeuroFusion para producci√≥n.")
        print("=" * 70)

        # Ejecutar todos los pasos
        steps = [
            ("Configuraci√≥n de entorno virtual", self.step_1_setup_virtual_environment),
            ("Activaci√≥n de entorno virtual", self.step_2_activate_environment),
            ("Correcci√≥n de dependencias", self.step_1_fix_dependencies),
            ("Inicializaci√≥n de bases de datos", self.step_2_initialize_databases),
            ("Verificaci√≥n del sistema", self.step_3_verify_system),
            (
                "Verificaci√≥n completa para producci√≥n",
                self.step_4_complete_verification,
            ),
            ("Verificaci√≥n de Docker", self.step_5_docker_verification),
            ("Verificaci√≥n final de salud", self.step_7_final_health_check),
        ]

        for step_name, step_func in steps:
            print(f"\n‚è≥ Ejecutando: {step_name}")
            try:
                step_func()
            except Exception as e:
                print(f"‚ùå Error en {step_name}: {e}")
                self.results[step_name.lower().replace(" ", "_")] = False

        # Generar reporte final
        report = self.generate_final_report()

        # Mostrar resumen final
        self.print_final_summary(report)

        return report


def main():
    setup = MasterProductionSetup()
    report = setup.run_master_setup()

    # Retornar c√≥digo de salida apropiado
    if report["status"] == "READY":
        sys.exit(0)
    elif report["status"] == "NEEDS_WORK":
        sys.exit(1)
    else:
        sys.exit(2)


if __name__ == "__main__":
    main()
