#!/usr/bin/env python3
"""
Script de prueba de interacciones de chat con Modelo Phi-3 de 4 bits
"""

import requests
import json
import logging
import sys
import traceback

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s: %(message)s'
)
logger = logging.getLogger(__name__)

# Configuraci√≥n de prueba
BASE_URL = 'http://localhost:8000/api'  # Cambiar a ruta base con /api
TEST_USER = {
    'username': 'usuario_prueba_modelo',
    'email': 'usuario_prueba_modelo@sheily.ai',
    'password': 'Prueba123!',
    'full_name': 'Usuario Prueba Phi-3'
}
TEST_USER_TOKEN = None

def register_or_login():
    """Registrar o iniciar sesi√≥n con usuario de prueba"""
    global TEST_USER_TOKEN
    try:
        # Intentar iniciar sesi√≥n primero
        login_data = {
            'username': TEST_USER['username'],
            'password': TEST_USER['password']
        }
        logger.debug(f"Intentando iniciar sesi√≥n con: {login_data}")
        
        login_response = requests.post(f'{BASE_URL}/auth/login', json=login_data)
        logger.debug(f"Respuesta de login: {login_response.status_code}")
        logger.debug(f"Contenido de respuesta: {login_response.text}")
        
        if login_response.status_code == 200:
            TEST_USER_TOKEN = login_response.json()['token']
            logger.info("‚úÖ Inicio de sesi√≥n exitoso")
            return TEST_USER_TOKEN
        
        # Si el inicio de sesi√≥n falla, intentar registrar
        register_data = {
            'username': TEST_USER['username'],
            'email': TEST_USER['email'],
            'password': TEST_USER['password'],
            'full_name': TEST_USER['full_name']
        }
        logger.debug(f"Intentando registrar usuario: {register_data}")
        
        register_response = requests.post(f'{BASE_URL}/auth/register', json=register_data)
        logger.debug(f"Respuesta de registro: {register_response.status_code}")
        logger.debug(f"Contenido de respuesta: {register_response.text}")
        
        register_response.raise_for_status()
        
        TEST_USER_TOKEN = register_response.json()['token']
        logger.info("‚úÖ Usuario registrado exitosamente")
        return TEST_USER_TOKEN
    
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Error en registro/login: {e}")
        if hasattr(e, 'response'):
            logger.error(f"Detalles del error: {e.response.text}")
        logger.error(traceback.format_exc())
        return None

def create_chat_session(token):
    """Crear sesi√≥n de chat"""
    try:
        headers = {'Authorization': f'Bearer {token}'}
        
        # Imprimir informaci√≥n de depuraci√≥n
        logger.debug(f"URL completa: {BASE_URL}/chat/session")
        logger.debug(f"Headers: {headers}")
        
        response = requests.post(f'{BASE_URL}/chat/session', headers=headers)
        
        # Imprimir informaci√≥n detallada de la respuesta
        logger.debug(f"C√≥digo de estado completo: {response.status_code}")
        logger.debug(f"Contenido de respuesta completo: {response.text}")
        logger.debug(f"Cabeceras de respuesta: {response.headers}")
        
        response.raise_for_status()
        session_id = response.json()['sessionId']
        logger.info(f"‚úÖ Sesi√≥n de chat creada: {session_id}")
        return session_id
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Error creando sesi√≥n de chat: {e}")
        if hasattr(e, 'response'):
            logger.error(f"Detalles del error: {e.response.text}")
            logger.error(f"C√≥digo de estado: {e.response.status_code}")
        logger.error(traceback.format_exc())
        return None

def send_chat_message(token, session_id, message):
    """Enviar mensaje de chat"""
    try:
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        payload = {
            'message': message,
            'sessionId': session_id
        }
        logger.debug(f"Enviando mensaje: {payload}")
        
        response = requests.post(f'{BASE_URL}/chat/send', 
                                 headers=headers, 
                                 json=payload)
        
        logger.debug(f"Respuesta de env√≠o de mensaje: {response.status_code}")
        logger.debug(f"Contenido de respuesta: {response.text}")
        
        response.raise_for_status()
        chat_response = response.json()
        
        logger.info(f"üì® Mensaje enviado: {message}")
        logger.info(f"ü§ñ Respuesta: {chat_response['response']}")
        logger.info(f"‚è±Ô∏è Tiempo de respuesta: {chat_response['responseTime']} segundos")
        logger.info(f"üí¨ Tokens usados: {chat_response['tokensUsed']}")
        
        return chat_response
    except Exception as e:
        logger.error(f"‚ùå Error enviando mensaje de chat: {e}")
        logger.error(traceback.format_exc())
        return None

def test_chat_interactions():
    """Realizar pruebas de interacci√≥n de chat"""
    # Iniciar sesi√≥n o registrar
    token = register_or_login()
    if not token:
        logger.error("No se pudo obtener token de autenticaci√≥n")
        return

    # Crear sesi√≥n de chat
    session_id = create_chat_session(token)
    if not session_id:
        logger.error("No se pudo crear sesi√≥n de chat")
        return

    # Pruebas de conversaci√≥n
    test_prompts = [
        "Hola, ¬øc√≥mo est√°s?",
        "Expl√≠came qu√© es la inteligencia artificial en t√©rminos simples",
        "¬øCu√°les son los beneficios de aprender programaci√≥n?",
        "Dame un consejo para mejorar mi productividad",
        "H√°blame sobre el futuro de la tecnolog√≠a"
    ]

    for prompt in test_prompts:
        response = send_chat_message(token, session_id, prompt)
        if not response:
            break
        # Peque√±a pausa entre mensajes para simular conversaci√≥n
        import time
        time.sleep(1)

def main():
    """Punto de entrada principal"""
    logger.info("üöÄ Iniciando pruebas de interacci√≥n de chat con Phi-3 4 bits")
    test_chat_interactions()
    logger.info("üèÅ Pruebas de chat completadas")

if __name__ == '__main__':
    main()
